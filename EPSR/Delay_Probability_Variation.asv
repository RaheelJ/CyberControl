close all
clear
clc

load('Workspace/Controller_Workspace')

%% Open Loop System
N=150;                  %Total number of samples with period T
T=0.2;                  %Smallest sampling period
Ts=1e-4;                %Continuous time sampling period

sysfd=c2d(sysf, Ts);    %Full system discrete      
Ac=sysfd.a;
Bc=sysfd.b;

tf=0:Ts:(N*T-1);        %Time axis                        
Nf=size(tf);
Nf=Nf(2);

df=zeros(n, Nf);        %System states
init=[zeros(1, 6) 0.5 zeros(1, 6) 0.5 zeros(1, 7)];
df(:, 1)=init';         

for i=1:Nf-1
    df(:, i+1) = Ac*df(:, i);
end

% Settling Time Calculation

STime_1=settlingtime(df(14, :), tf, 20, 'MidPercentReferenceLevel', 95, 'StateLevels', [0, 0.5], 'Tolerance', 2)
AN=200;

r2=0.7;
r3=0.85;
r4=0.95;
r5=1;

%% Delay Probability Variation
for r1=0.6:-0.1:0.1
    
    

    %% Closed loop system

    M=round(N/3);           %Total number of real time samples
    t=zeros(1, M);          %Measurement instants
    t(1)=0;

    x=zeros(n, M);          %Samples system states
    x(:, 1)=init';

    dsys=zeros(n, Nf);      %Continuous system states for proposed control
    dsys(:, 1)=init';

    xx=zeros(n, Nf);        %Continuous system states for LQG control
    xx(:, 1)=init';

    x_=zeros(n, N);         %Observer states for proposed control
    x_(:, 1)=init';

    xx_=zeros(n, N);        %Observer states for LQG control
    xx_(:, 1)=init';

    u=zeros(ku, N);         %Input for proposed control
    ux=zeros(ku, N);        %Input for LQG control

    %% Runtime
    for ALoop=1:AN

        i=1;                    %Loop variable
        l=1;                    %Sample number of period T
        K=1;                    %Sample number of period Ts
        k=1;                    %Continuous samples vector between period T

        while i<M
            r=rand(1, 1); 
            % j=1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     
            if(r<=r1)
                j=1;
                d=0.04*rand(1, 1);                  %Delay               
                u(:, l)=F1*x_(:, l);

                %System response due to delay
                run('Macros/Delayed_Response.m')

                %Normal system reponse
                run('Macros/System_Response.m')

                %Non-uniform sampled system state
                x(:, i+1)=dsys(:, K-1);             
                t(i+1)=t(i)+j*T;

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l)+L1*C*(x(:, i)-x_(:, l));
                l=l+1;

            % j=2
            % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            elseif(r>r1 && r<=r2)
                j=2;
                d=0.04+0.04*rand(1, 1);
                u(:, l)=F1*x_(:, l);

                %System response due to delay
                run('Macros/Delayed_Response.m')

                %Normal system reponse
                run('Macros/System_Response.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l)+L2*C*(x(:, i)-x_(:, l));
                l=l+1;

                %Normal system reponse
                u(:, l)=F2*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Non-uniform sampled system state
                x(:, i+1)=dsys(:, K-1);
                t(i+1)=t(i)+j*T;

            % j=3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
            elseif(r>r2 && r<=r3)
                j=3;
                d=0.08+0.04*rand(1, 1);
                u(:, l)=F1*x_(:, l);

                %System response due to delay
                run('Macros/Delayed_Response.m')

                %Normal system reponse
                run('Macros/System_Response.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l)+L3*C*(x(:, i)-x_(:, l));
                l=l+1;

                %Normal system reponse
                u(:, l)=F2*x_(:, l); 
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F3*x_(:, l); 
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Non-uniform sampled system state
                x(:, i+1)=dsys(:, K-1);
                t(i+1)=t(i)+j*T;

            % j=4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
            elseif(r>r3 && r<=r4)
                j=4;
                d=0.12+0.04*rand(1, 1);
                u(:, l)=F1*x_(:, l);

                %System response due to delay
                run('Macros/Delayed_Response.m')

                %Normal system reponse
                run('Macros/System_Response.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l)+L4*C*(x(:, i)-x_(:, l));
                l=l+1;

                %Normal system reponse
                u(:, l)=F2*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F3*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F4*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Non-uniform sampled system state
                x(:, i+1)=dsys(:, K-1);
                t(i+1)=t(i)+j*T;

            % j=5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
            elseif(r>r4 && r<=r5)
                j=5;
                d=0.16+0.04*rand(1, 1);
                u(:, l)=F1*x_(:, l);

                %System response due to delay
                run('Macros/Delayed_Response.m')

                %Normal system reponse
                run('Macros/System_Response.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l)+L4*C*(x(:, i)-x_(:, l));
                l=l+1;

                %Normal system reponse
                u(:, l)=F2*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F3*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F4*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Normal system reponse
                u(:, l)=F5*x_(:, l);
                run('Macros/System_Response_2.m')

                %Observer state updation
                x_(:, l+1)=A*x_(:, l)+B*u(:, l);
                l=l+1;

                %Non-uniform sampled system state
                x(:, i+1)=dsys(:, K-1);
                t(i+1)=t(i)+j*T;
            end

            i=i+1;
        end

        ALoop
        STime_2(ALoop)=settlingtime(dsys(14, :), tf, 20, 'MidPercentReferenceLevel', 95, 'StateLevels', [0, 0.5], 'Tolerance', 2);
    end
    AVG_STime=sum(STime_2)/AN
end
%% Plots

% % Rotor angle deviation d_21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% figure1 = figure;
% % Create axes
% axes1 = axes('Parent',figure1,'FontSize',20);
% xlim(axes1,[0 10]);
% box(axes1,'on');
% grid(axes1,'on');
% hold(axes1,'all');
% % Create stairs
% plot(tf,dsys(7, :),'LineStyle','-.','LineWidth',3,'Color',[1 0 0],'Parent',axes1,...
%     'DisplayName','With control');
% % Create title
% title('d_{21} vs time(sec)','FontSize',20);
% % Create stairs
% plot(tf,df(7, :),'LineWidth',3,'Color',[0 0 1],'Parent',axes1,...
%     'DisplayName','Without Control');
% % Create legend
% legend(axes1,'show');
% 
% % Rotor angle deviation d_31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% figure2 = figure;
% % Create axes
% axes2 = axes('Parent',figure2,'FontSize',20);
% xlim(axes2,[0 10]);
% box(axes2,'on');
% grid(axes2,'on');
% hold(axes2,'all');
% % Create stairs
% plot(tf,dsys(14, :),'LineStyle','-.','LineWidth',3,'Color',[1 0 0],'Parent',axes2,...
%     'DisplayName','With control');
% % Create title
% title('d_{31} vs time(sec)','FontSize',20);
% % Create stairs
% plot(tf,df(14, :),'LineWidth',3,'Color',[0 0 1],'Parent',axes2,...
%      'DisplayName','Without control');
% % Create legend
% legend(axes2,'show');
% 
% % Reactance Xc of TCSC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% figure5=figure;
% axes5 = axes('Parent',figure5,'FontSize',20);
% xlim(axes5,[0 10]);
% box(axes5,'on');
% grid(axes5,'on');
% hold(axes5,'all');
% % Create plot
% plot(tf,dsys(21, :),'LineWidth',3);
% % Create title
% title('X_c vs time(sec)','FontSize',20);


